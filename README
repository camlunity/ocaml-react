...............................................................................
React - %%SHORTDESCRIPTION%%
        Release %%VERSION%%
...............................................................................

React is an OCaml module for functional reactive programming (frp). It
provides support to program with time varying values : applicative
events and signals. React doesn't define any primitive event or
signal, this lets the client chooses the concrete timeline.

React is made of a single, independent, module and distributed under
the new BSD license.

Project home page : http://erratique.ch/software/react
Contact : daniel.buenzl i@erratique.ch


# Installation

React was tested with OCaml 3.11. react.mli and react.ml contain
everything, the code, the documentation and the license. You can just
copy them to your project directory or better, if you use ocamlbuild,
issue the following commands from the root directory of your project :

  > ln -s /path/to/react-%%VERSION%%/src react
  > echo "<react> : include" >> _tags

The documentation is generated by ocamldoc from react.mli. You can find
a generated version in the doc/ directory of the distribution.

If you have ocamlbuild, react can be installed in the $INSTALLDIR
directory by typing :
 
  > ./build 
  > INSTALLDIR=/path/to/install/dir ./build install 

if $INSTALLDIR is left unspecified, `ocamlc -where`/react is used.

Test programs are provided in the test/ directory. They can be built
with :

  > ./build test.native
  > ./build clock.native
  > ./build breakout.native

test.native tests the combinators, nothing should fail.

clock.native is a command line program using ANSI escape sequences and
the Unix module to print the current local time.

breakout.native is a command line program using ANSI escape sequences
and the Unix module to implement a simple breakout game.